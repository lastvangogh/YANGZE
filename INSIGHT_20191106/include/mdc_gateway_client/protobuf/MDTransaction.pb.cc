// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MDTransaction.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MDTransaction.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

namespace {

const ::google::protobuf::Descriptor* MDTransaction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MDTransaction_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MDTransaction_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_MDTransaction_2eproto() {
  protobuf_AddDesc_MDTransaction_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MDTransaction.proto");
  GOOGLE_CHECK(file != NULL);
  MDTransaction_descriptor_ = file->message_type(0);
  static const int MDTransaction_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MDTransaction, htscsecurityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MDTransaction, mddate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MDTransaction, mdtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MDTransaction, datatimestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MDTransaction, securityidsource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MDTransaction, securitytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MDTransaction, tradeindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MDTransaction, tradebuyno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MDTransaction, tradesellno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MDTransaction, tradetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MDTransaction, tradebsflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MDTransaction, tradeprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MDTransaction, tradeqty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MDTransaction, trademoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MDTransaction, channelno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MDTransaction, exchangedate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MDTransaction, exchangetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MDTransaction, tradecleanprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MDTransaction, accruedinterestamt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MDTransaction, tradedirtyprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MDTransaction, maturityyield_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MDTransaction, fitradingmethod_),
  };
  MDTransaction_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MDTransaction_descriptor_,
      MDTransaction::internal_default_instance(),
      MDTransaction_offsets_,
      -1,
      -1,
      -1,
      sizeof(MDTransaction),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MDTransaction, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MDTransaction_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MDTransaction_descriptor_, MDTransaction::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MDTransaction_2eproto() {
  MDTransaction_default_instance_.Shutdown();
  delete MDTransaction_reflection_;
}

void protobuf_InitDefaults_MDTransaction_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::com::htsc::mdc::model::protobuf_InitDefaults_ESecurityIDSource_2eproto();
  ::com::htsc::mdc::model::protobuf_InitDefaults_ESecurityType_2eproto();
  ::google::protobuf::internal::GetEmptyString();
  MDTransaction_default_instance_.DefaultConstruct();
  MDTransaction_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_MDTransaction_2eproto_once_);
void protobuf_InitDefaults_MDTransaction_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_MDTransaction_2eproto_once_,
                 &protobuf_InitDefaults_MDTransaction_2eproto_impl);
}
void protobuf_AddDesc_MDTransaction_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_MDTransaction_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023MDTransaction.proto\022\032com.htsc.mdc.insi"
    "ght.model\032\027ESecurityIDSource.proto\032\023ESec"
    "urityType.proto\"\264\004\n\rMDTransaction\022\026\n\016HTS"
    "CSecurityID\030\001 \001(\t\022\016\n\006MDDate\030\002 \001(\005\022\016\n\006MDT"
    "ime\030\003 \001(\005\022\025\n\rDataTimestamp\030\004 \001(\003\022\?\n\020secu"
    "rityIDSource\030\005 \001(\0162%.com.htsc.mdc.model."
    "ESecurityIDSource\0227\n\014securityType\030\006 \001(\0162"
    "!.com.htsc.mdc.model.ESecurityType\022\022\n\nTr"
    "adeIndex\030\007 \001(\003\022\022\n\nTradeBuyNo\030\010 \001(\003\022\023\n\013Tr"
    "adeSellNo\030\t \001(\003\022\021\n\tTradeType\030\n \001(\005\022\023\n\013Tr"
    "adeBSFlag\030\013 \001(\005\022\022\n\nTradePrice\030\014 \001(\003\022\020\n\010T"
    "radeQty\030\r \001(\003\022\022\n\nTradeMoney\030\016 \001(\003\022\021\n\tCha"
    "nnelNo\030\020 \001(\005\022\024\n\014ExchangeDate\030\021 \001(\005\022\024\n\014Ex"
    "changeTime\030\022 \001(\005\022\027\n\017TradeCleanPrice\030\023 \001("
    "\003\022\032\n\022AccruedInterestAmt\030\024 \001(\003\022\027\n\017TradeDi"
    "rtyPrice\030\025 \001(\003\022\025\n\rMaturityYield\030\026 \001(\003\022\027\n"
    "\017FITradingMethod\030\027 \001(\tB6\n\032com.htsc.mdc.i"
    "nsight.modelB\023MDTransactionProtosH\001\240\001\001b\006"
    "proto3", 726);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MDTransaction.proto", &protobuf_RegisterTypes);
  ::com::htsc::mdc::model::protobuf_AddDesc_ESecurityIDSource_2eproto();
  ::com::htsc::mdc::model::protobuf_AddDesc_ESecurityType_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MDTransaction_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_MDTransaction_2eproto_once_);
void protobuf_AddDesc_MDTransaction_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_MDTransaction_2eproto_once_,
                 &protobuf_AddDesc_MDTransaction_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MDTransaction_2eproto {
  StaticDescriptorInitializer_MDTransaction_2eproto() {
    protobuf_AddDesc_MDTransaction_2eproto();
  }
} static_descriptor_initializer_MDTransaction_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MDTransaction::kHTSCSecurityIDFieldNumber;
const int MDTransaction::kMDDateFieldNumber;
const int MDTransaction::kMDTimeFieldNumber;
const int MDTransaction::kDataTimestampFieldNumber;
const int MDTransaction::kSecurityIDSourceFieldNumber;
const int MDTransaction::kSecurityTypeFieldNumber;
const int MDTransaction::kTradeIndexFieldNumber;
const int MDTransaction::kTradeBuyNoFieldNumber;
const int MDTransaction::kTradeSellNoFieldNumber;
const int MDTransaction::kTradeTypeFieldNumber;
const int MDTransaction::kTradeBSFlagFieldNumber;
const int MDTransaction::kTradePriceFieldNumber;
const int MDTransaction::kTradeQtyFieldNumber;
const int MDTransaction::kTradeMoneyFieldNumber;
const int MDTransaction::kChannelNoFieldNumber;
const int MDTransaction::kExchangeDateFieldNumber;
const int MDTransaction::kExchangeTimeFieldNumber;
const int MDTransaction::kTradeCleanPriceFieldNumber;
const int MDTransaction::kAccruedInterestAmtFieldNumber;
const int MDTransaction::kTradeDirtyPriceFieldNumber;
const int MDTransaction::kMaturityYieldFieldNumber;
const int MDTransaction::kFITradingMethodFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MDTransaction::MDTransaction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_MDTransaction_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.htsc.mdc.insight.model.MDTransaction)
}

void MDTransaction::InitAsDefaultInstance() {
}

MDTransaction::MDTransaction(const MDTransaction& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.MDTransaction)
}

void MDTransaction::SharedCtor() {
  htscsecurityid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fitradingmethod_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&mddate_, 0, reinterpret_cast<char*>(&exchangetime_) -
    reinterpret_cast<char*>(&mddate_) + sizeof(exchangetime_));
  _cached_size_ = 0;
}

MDTransaction::~MDTransaction() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.MDTransaction)
  SharedDtor();
}

void MDTransaction::SharedDtor() {
  htscsecurityid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fitradingmethod_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MDTransaction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MDTransaction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MDTransaction_descriptor_;
}

const MDTransaction& MDTransaction::default_instance() {
  protobuf_InitDefaults_MDTransaction_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<MDTransaction> MDTransaction_default_instance_;

MDTransaction* MDTransaction::New(::google::protobuf::Arena* arena) const {
  MDTransaction* n = new MDTransaction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MDTransaction::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.MDTransaction)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MDTransaction, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MDTransaction*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mddate_, tradebuyno_);
  htscsecurityid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(tradesellno_, exchangedate_);
  ZR_(tradecleanprice_, exchangetime_);
  fitradingmethod_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool MDTransaction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.htsc.mdc.insight.model.MDTransaction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string HTSCSecurityID = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_htscsecurityid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->htscsecurityid().data(), this->htscsecurityid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDTransaction.HTSCSecurityID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_MDDate;
        break;
      }

      // optional int32 MDDate = 2;
      case 2: {
        if (tag == 16) {
         parse_MDDate:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mddate_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_MDTime;
        break;
      }

      // optional int32 MDTime = 3;
      case 3: {
        if (tag == 24) {
         parse_MDTime:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mdtime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_DataTimestamp;
        break;
      }

      // optional int64 DataTimestamp = 4;
      case 4: {
        if (tag == 32) {
         parse_DataTimestamp:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &datatimestamp_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_securityIDSource;
        break;
      }

      // optional .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
      case 5: {
        if (tag == 40) {
         parse_securityIDSource:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_securityidsource(static_cast< ::com::htsc::mdc::model::ESecurityIDSource >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_securityType;
        break;
      }

      // optional .com.htsc.mdc.model.ESecurityType securityType = 6;
      case 6: {
        if (tag == 48) {
         parse_securityType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_securitytype(static_cast< ::com::htsc::mdc::model::ESecurityType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_TradeIndex;
        break;
      }

      // optional int64 TradeIndex = 7;
      case 7: {
        if (tag == 56) {
         parse_TradeIndex:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tradeindex_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_TradeBuyNo;
        break;
      }

      // optional int64 TradeBuyNo = 8;
      case 8: {
        if (tag == 64) {
         parse_TradeBuyNo:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tradebuyno_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_TradeSellNo;
        break;
      }

      // optional int64 TradeSellNo = 9;
      case 9: {
        if (tag == 72) {
         parse_TradeSellNo:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tradesellno_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_TradeType;
        break;
      }

      // optional int32 TradeType = 10;
      case 10: {
        if (tag == 80) {
         parse_TradeType:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tradetype_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_TradeBSFlag;
        break;
      }

      // optional int32 TradeBSFlag = 11;
      case 11: {
        if (tag == 88) {
         parse_TradeBSFlag:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tradebsflag_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_TradePrice;
        break;
      }

      // optional int64 TradePrice = 12;
      case 12: {
        if (tag == 96) {
         parse_TradePrice:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tradeprice_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_TradeQty;
        break;
      }

      // optional int64 TradeQty = 13;
      case 13: {
        if (tag == 104) {
         parse_TradeQty:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tradeqty_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_TradeMoney;
        break;
      }

      // optional int64 TradeMoney = 14;
      case 14: {
        if (tag == 112) {
         parse_TradeMoney:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &trademoney_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_ChannelNo;
        break;
      }

      // optional int32 ChannelNo = 16;
      case 16: {
        if (tag == 128) {
         parse_ChannelNo:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channelno_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_ExchangeDate;
        break;
      }

      // optional int32 ExchangeDate = 17;
      case 17: {
        if (tag == 136) {
         parse_ExchangeDate:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exchangedate_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_ExchangeTime;
        break;
      }

      // optional int32 ExchangeTime = 18;
      case 18: {
        if (tag == 144) {
         parse_ExchangeTime:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exchangetime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_TradeCleanPrice;
        break;
      }

      // optional int64 TradeCleanPrice = 19;
      case 19: {
        if (tag == 152) {
         parse_TradeCleanPrice:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tradecleanprice_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_AccruedInterestAmt;
        break;
      }

      // optional int64 AccruedInterestAmt = 20;
      case 20: {
        if (tag == 160) {
         parse_AccruedInterestAmt:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &accruedinterestamt_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_TradeDirtyPrice;
        break;
      }

      // optional int64 TradeDirtyPrice = 21;
      case 21: {
        if (tag == 168) {
         parse_TradeDirtyPrice:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tradedirtyprice_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_MaturityYield;
        break;
      }

      // optional int64 MaturityYield = 22;
      case 22: {
        if (tag == 176) {
         parse_MaturityYield:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &maturityyield_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_FITradingMethod;
        break;
      }

      // optional string FITradingMethod = 23;
      case 23: {
        if (tag == 186) {
         parse_FITradingMethod:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fitradingmethod()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fitradingmethod().data(), this->fitradingmethod().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDTransaction.FITradingMethod"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.htsc.mdc.insight.model.MDTransaction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.htsc.mdc.insight.model.MDTransaction)
  return false;
#undef DO_
}

void MDTransaction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.htsc.mdc.insight.model.MDTransaction)
  // optional string HTSCSecurityID = 1;
  if (this->htscsecurityid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->htscsecurityid().data(), this->htscsecurityid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDTransaction.HTSCSecurityID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->htscsecurityid(), output);
  }

  // optional int32 MDDate = 2;
  if (this->mddate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mddate(), output);
  }

  // optional int32 MDTime = 3;
  if (this->mdtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mdtime(), output);
  }

  // optional int64 DataTimestamp = 4;
  if (this->datatimestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->datatimestamp(), output);
  }

  // optional .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
  if (this->securityidsource() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->securityidsource(), output);
  }

  // optional .com.htsc.mdc.model.ESecurityType securityType = 6;
  if (this->securitytype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->securitytype(), output);
  }

  // optional int64 TradeIndex = 7;
  if (this->tradeindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->tradeindex(), output);
  }

  // optional int64 TradeBuyNo = 8;
  if (this->tradebuyno() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->tradebuyno(), output);
  }

  // optional int64 TradeSellNo = 9;
  if (this->tradesellno() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->tradesellno(), output);
  }

  // optional int32 TradeType = 10;
  if (this->tradetype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->tradetype(), output);
  }

  // optional int32 TradeBSFlag = 11;
  if (this->tradebsflag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->tradebsflag(), output);
  }

  // optional int64 TradePrice = 12;
  if (this->tradeprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->tradeprice(), output);
  }

  // optional int64 TradeQty = 13;
  if (this->tradeqty() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->tradeqty(), output);
  }

  // optional int64 TradeMoney = 14;
  if (this->trademoney() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->trademoney(), output);
  }

  // optional int32 ChannelNo = 16;
  if (this->channelno() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->channelno(), output);
  }

  // optional int32 ExchangeDate = 17;
  if (this->exchangedate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->exchangedate(), output);
  }

  // optional int32 ExchangeTime = 18;
  if (this->exchangetime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->exchangetime(), output);
  }

  // optional int64 TradeCleanPrice = 19;
  if (this->tradecleanprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(19, this->tradecleanprice(), output);
  }

  // optional int64 AccruedInterestAmt = 20;
  if (this->accruedinterestamt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(20, this->accruedinterestamt(), output);
  }

  // optional int64 TradeDirtyPrice = 21;
  if (this->tradedirtyprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(21, this->tradedirtyprice(), output);
  }

  // optional int64 MaturityYield = 22;
  if (this->maturityyield() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(22, this->maturityyield(), output);
  }

  // optional string FITradingMethod = 23;
  if (this->fitradingmethod().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fitradingmethod().data(), this->fitradingmethod().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDTransaction.FITradingMethod");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      23, this->fitradingmethod(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.htsc.mdc.insight.model.MDTransaction)
}

::google::protobuf::uint8* MDTransaction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.MDTransaction)
  // optional string HTSCSecurityID = 1;
  if (this->htscsecurityid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->htscsecurityid().data(), this->htscsecurityid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDTransaction.HTSCSecurityID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->htscsecurityid(), target);
  }

  // optional int32 MDDate = 2;
  if (this->mddate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mddate(), target);
  }

  // optional int32 MDTime = 3;
  if (this->mdtime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mdtime(), target);
  }

  // optional int64 DataTimestamp = 4;
  if (this->datatimestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->datatimestamp(), target);
  }

  // optional .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
  if (this->securityidsource() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->securityidsource(), target);
  }

  // optional .com.htsc.mdc.model.ESecurityType securityType = 6;
  if (this->securitytype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->securitytype(), target);
  }

  // optional int64 TradeIndex = 7;
  if (this->tradeindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->tradeindex(), target);
  }

  // optional int64 TradeBuyNo = 8;
  if (this->tradebuyno() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->tradebuyno(), target);
  }

  // optional int64 TradeSellNo = 9;
  if (this->tradesellno() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->tradesellno(), target);
  }

  // optional int32 TradeType = 10;
  if (this->tradetype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->tradetype(), target);
  }

  // optional int32 TradeBSFlag = 11;
  if (this->tradebsflag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->tradebsflag(), target);
  }

  // optional int64 TradePrice = 12;
  if (this->tradeprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->tradeprice(), target);
  }

  // optional int64 TradeQty = 13;
  if (this->tradeqty() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->tradeqty(), target);
  }

  // optional int64 TradeMoney = 14;
  if (this->trademoney() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->trademoney(), target);
  }

  // optional int32 ChannelNo = 16;
  if (this->channelno() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->channelno(), target);
  }

  // optional int32 ExchangeDate = 17;
  if (this->exchangedate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->exchangedate(), target);
  }

  // optional int32 ExchangeTime = 18;
  if (this->exchangetime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->exchangetime(), target);
  }

  // optional int64 TradeCleanPrice = 19;
  if (this->tradecleanprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(19, this->tradecleanprice(), target);
  }

  // optional int64 AccruedInterestAmt = 20;
  if (this->accruedinterestamt() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(20, this->accruedinterestamt(), target);
  }

  // optional int64 TradeDirtyPrice = 21;
  if (this->tradedirtyprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(21, this->tradedirtyprice(), target);
  }

  // optional int64 MaturityYield = 22;
  if (this->maturityyield() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(22, this->maturityyield(), target);
  }

  // optional string FITradingMethod = 23;
  if (this->fitradingmethod().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fitradingmethod().data(), this->fitradingmethod().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDTransaction.FITradingMethod");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->fitradingmethod(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.MDTransaction)
  return target;
}

size_t MDTransaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.MDTransaction)
  size_t total_size = 0;

  // optional string HTSCSecurityID = 1;
  if (this->htscsecurityid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->htscsecurityid());
  }

  // optional int32 MDDate = 2;
  if (this->mddate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mddate());
  }

  // optional int32 MDTime = 3;
  if (this->mdtime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mdtime());
  }

  // optional int64 DataTimestamp = 4;
  if (this->datatimestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->datatimestamp());
  }

  // optional .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
  if (this->securityidsource() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->securityidsource());
  }

  // optional .com.htsc.mdc.model.ESecurityType securityType = 6;
  if (this->securitytype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->securitytype());
  }

  // optional int64 TradeIndex = 7;
  if (this->tradeindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->tradeindex());
  }

  // optional int64 TradeBuyNo = 8;
  if (this->tradebuyno() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->tradebuyno());
  }

  // optional int64 TradeSellNo = 9;
  if (this->tradesellno() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->tradesellno());
  }

  // optional int32 TradeType = 10;
  if (this->tradetype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tradetype());
  }

  // optional int32 TradeBSFlag = 11;
  if (this->tradebsflag() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tradebsflag());
  }

  // optional int64 TradePrice = 12;
  if (this->tradeprice() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->tradeprice());
  }

  // optional int64 TradeQty = 13;
  if (this->tradeqty() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->tradeqty());
  }

  // optional int64 TradeMoney = 14;
  if (this->trademoney() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->trademoney());
  }

  // optional int32 ChannelNo = 16;
  if (this->channelno() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->channelno());
  }

  // optional int32 ExchangeDate = 17;
  if (this->exchangedate() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->exchangedate());
  }

  // optional int32 ExchangeTime = 18;
  if (this->exchangetime() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->exchangetime());
  }

  // optional int64 TradeCleanPrice = 19;
  if (this->tradecleanprice() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->tradecleanprice());
  }

  // optional int64 AccruedInterestAmt = 20;
  if (this->accruedinterestamt() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->accruedinterestamt());
  }

  // optional int64 TradeDirtyPrice = 21;
  if (this->tradedirtyprice() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->tradedirtyprice());
  }

  // optional int64 MaturityYield = 22;
  if (this->maturityyield() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->maturityyield());
  }

  // optional string FITradingMethod = 23;
  if (this->fitradingmethod().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fitradingmethod());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MDTransaction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.htsc.mdc.insight.model.MDTransaction)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MDTransaction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MDTransaction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.htsc.mdc.insight.model.MDTransaction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.htsc.mdc.insight.model.MDTransaction)
    UnsafeMergeFrom(*source);
  }
}

void MDTransaction::MergeFrom(const MDTransaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.MDTransaction)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void MDTransaction::UnsafeMergeFrom(const MDTransaction& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.htscsecurityid().size() > 0) {

    htscsecurityid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.htscsecurityid_);
  }
  if (from.mddate() != 0) {
    set_mddate(from.mddate());
  }
  if (from.mdtime() != 0) {
    set_mdtime(from.mdtime());
  }
  if (from.datatimestamp() != 0) {
    set_datatimestamp(from.datatimestamp());
  }
  if (from.securityidsource() != 0) {
    set_securityidsource(from.securityidsource());
  }
  if (from.securitytype() != 0) {
    set_securitytype(from.securitytype());
  }
  if (from.tradeindex() != 0) {
    set_tradeindex(from.tradeindex());
  }
  if (from.tradebuyno() != 0) {
    set_tradebuyno(from.tradebuyno());
  }
  if (from.tradesellno() != 0) {
    set_tradesellno(from.tradesellno());
  }
  if (from.tradetype() != 0) {
    set_tradetype(from.tradetype());
  }
  if (from.tradebsflag() != 0) {
    set_tradebsflag(from.tradebsflag());
  }
  if (from.tradeprice() != 0) {
    set_tradeprice(from.tradeprice());
  }
  if (from.tradeqty() != 0) {
    set_tradeqty(from.tradeqty());
  }
  if (from.trademoney() != 0) {
    set_trademoney(from.trademoney());
  }
  if (from.channelno() != 0) {
    set_channelno(from.channelno());
  }
  if (from.exchangedate() != 0) {
    set_exchangedate(from.exchangedate());
  }
  if (from.exchangetime() != 0) {
    set_exchangetime(from.exchangetime());
  }
  if (from.tradecleanprice() != 0) {
    set_tradecleanprice(from.tradecleanprice());
  }
  if (from.accruedinterestamt() != 0) {
    set_accruedinterestamt(from.accruedinterestamt());
  }
  if (from.tradedirtyprice() != 0) {
    set_tradedirtyprice(from.tradedirtyprice());
  }
  if (from.maturityyield() != 0) {
    set_maturityyield(from.maturityyield());
  }
  if (from.fitradingmethod().size() > 0) {

    fitradingmethod_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fitradingmethod_);
  }
}

void MDTransaction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.htsc.mdc.insight.model.MDTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MDTransaction::CopyFrom(const MDTransaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.MDTransaction)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool MDTransaction::IsInitialized() const {

  return true;
}

void MDTransaction::Swap(MDTransaction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MDTransaction::InternalSwap(MDTransaction* other) {
  htscsecurityid_.Swap(&other->htscsecurityid_);
  std::swap(mddate_, other->mddate_);
  std::swap(mdtime_, other->mdtime_);
  std::swap(datatimestamp_, other->datatimestamp_);
  std::swap(securityidsource_, other->securityidsource_);
  std::swap(securitytype_, other->securitytype_);
  std::swap(tradeindex_, other->tradeindex_);
  std::swap(tradebuyno_, other->tradebuyno_);
  std::swap(tradesellno_, other->tradesellno_);
  std::swap(tradetype_, other->tradetype_);
  std::swap(tradebsflag_, other->tradebsflag_);
  std::swap(tradeprice_, other->tradeprice_);
  std::swap(tradeqty_, other->tradeqty_);
  std::swap(trademoney_, other->trademoney_);
  std::swap(channelno_, other->channelno_);
  std::swap(exchangedate_, other->exchangedate_);
  std::swap(exchangetime_, other->exchangetime_);
  std::swap(tradecleanprice_, other->tradecleanprice_);
  std::swap(accruedinterestamt_, other->accruedinterestamt_);
  std::swap(tradedirtyprice_, other->tradedirtyprice_);
  std::swap(maturityyield_, other->maturityyield_);
  fitradingmethod_.Swap(&other->fitradingmethod_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MDTransaction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MDTransaction_descriptor_;
  metadata.reflection = MDTransaction_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MDTransaction

// optional string HTSCSecurityID = 1;
void MDTransaction::clear_htscsecurityid() {
  htscsecurityid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MDTransaction::htscsecurityid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDTransaction.HTSCSecurityID)
  return htscsecurityid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MDTransaction::set_htscsecurityid(const ::std::string& value) {
  
  htscsecurityid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDTransaction.HTSCSecurityID)
}
void MDTransaction::set_htscsecurityid(const char* value) {
  
  htscsecurityid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDTransaction.HTSCSecurityID)
}
void MDTransaction::set_htscsecurityid(const char* value, size_t size) {
  
  htscsecurityid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDTransaction.HTSCSecurityID)
}
::std::string* MDTransaction::mutable_htscsecurityid() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDTransaction.HTSCSecurityID)
  return htscsecurityid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MDTransaction::release_htscsecurityid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDTransaction.HTSCSecurityID)
  
  return htscsecurityid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MDTransaction::set_allocated_htscsecurityid(::std::string* htscsecurityid) {
  if (htscsecurityid != NULL) {
    
  } else {
    
  }
  htscsecurityid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), htscsecurityid);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDTransaction.HTSCSecurityID)
}

// optional int32 MDDate = 2;
void MDTransaction::clear_mddate() {
  mddate_ = 0;
}
::google::protobuf::int32 MDTransaction::mddate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDTransaction.MDDate)
  return mddate_;
}
void MDTransaction::set_mddate(::google::protobuf::int32 value) {
  
  mddate_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDTransaction.MDDate)
}

// optional int32 MDTime = 3;
void MDTransaction::clear_mdtime() {
  mdtime_ = 0;
}
::google::protobuf::int32 MDTransaction::mdtime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDTransaction.MDTime)
  return mdtime_;
}
void MDTransaction::set_mdtime(::google::protobuf::int32 value) {
  
  mdtime_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDTransaction.MDTime)
}

// optional int64 DataTimestamp = 4;
void MDTransaction::clear_datatimestamp() {
  datatimestamp_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 MDTransaction::datatimestamp() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDTransaction.DataTimestamp)
  return datatimestamp_;
}
void MDTransaction::set_datatimestamp(::google::protobuf::int64 value) {
  
  datatimestamp_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDTransaction.DataTimestamp)
}

// optional .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
void MDTransaction::clear_securityidsource() {
  securityidsource_ = 0;
}
::com::htsc::mdc::model::ESecurityIDSource MDTransaction::securityidsource() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDTransaction.securityIDSource)
  return static_cast< ::com::htsc::mdc::model::ESecurityIDSource >(securityidsource_);
}
void MDTransaction::set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value) {
  
  securityidsource_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDTransaction.securityIDSource)
}

// optional .com.htsc.mdc.model.ESecurityType securityType = 6;
void MDTransaction::clear_securitytype() {
  securitytype_ = 0;
}
::com::htsc::mdc::model::ESecurityType MDTransaction::securitytype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDTransaction.securityType)
  return static_cast< ::com::htsc::mdc::model::ESecurityType >(securitytype_);
}
void MDTransaction::set_securitytype(::com::htsc::mdc::model::ESecurityType value) {
  
  securitytype_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDTransaction.securityType)
}

// optional int64 TradeIndex = 7;
void MDTransaction::clear_tradeindex() {
  tradeindex_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 MDTransaction::tradeindex() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDTransaction.TradeIndex)
  return tradeindex_;
}
void MDTransaction::set_tradeindex(::google::protobuf::int64 value) {
  
  tradeindex_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDTransaction.TradeIndex)
}

// optional int64 TradeBuyNo = 8;
void MDTransaction::clear_tradebuyno() {
  tradebuyno_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 MDTransaction::tradebuyno() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDTransaction.TradeBuyNo)
  return tradebuyno_;
}
void MDTransaction::set_tradebuyno(::google::protobuf::int64 value) {
  
  tradebuyno_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDTransaction.TradeBuyNo)
}

// optional int64 TradeSellNo = 9;
void MDTransaction::clear_tradesellno() {
  tradesellno_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 MDTransaction::tradesellno() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDTransaction.TradeSellNo)
  return tradesellno_;
}
void MDTransaction::set_tradesellno(::google::protobuf::int64 value) {
  
  tradesellno_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDTransaction.TradeSellNo)
}

// optional int32 TradeType = 10;
void MDTransaction::clear_tradetype() {
  tradetype_ = 0;
}
::google::protobuf::int32 MDTransaction::tradetype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDTransaction.TradeType)
  return tradetype_;
}
void MDTransaction::set_tradetype(::google::protobuf::int32 value) {
  
  tradetype_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDTransaction.TradeType)
}

// optional int32 TradeBSFlag = 11;
void MDTransaction::clear_tradebsflag() {
  tradebsflag_ = 0;
}
::google::protobuf::int32 MDTransaction::tradebsflag() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDTransaction.TradeBSFlag)
  return tradebsflag_;
}
void MDTransaction::set_tradebsflag(::google::protobuf::int32 value) {
  
  tradebsflag_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDTransaction.TradeBSFlag)
}

// optional int64 TradePrice = 12;
void MDTransaction::clear_tradeprice() {
  tradeprice_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 MDTransaction::tradeprice() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDTransaction.TradePrice)
  return tradeprice_;
}
void MDTransaction::set_tradeprice(::google::protobuf::int64 value) {
  
  tradeprice_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDTransaction.TradePrice)
}

// optional int64 TradeQty = 13;
void MDTransaction::clear_tradeqty() {
  tradeqty_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 MDTransaction::tradeqty() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDTransaction.TradeQty)
  return tradeqty_;
}
void MDTransaction::set_tradeqty(::google::protobuf::int64 value) {
  
  tradeqty_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDTransaction.TradeQty)
}

// optional int64 TradeMoney = 14;
void MDTransaction::clear_trademoney() {
  trademoney_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 MDTransaction::trademoney() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDTransaction.TradeMoney)
  return trademoney_;
}
void MDTransaction::set_trademoney(::google::protobuf::int64 value) {
  
  trademoney_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDTransaction.TradeMoney)
}

// optional int32 ChannelNo = 16;
void MDTransaction::clear_channelno() {
  channelno_ = 0;
}
::google::protobuf::int32 MDTransaction::channelno() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDTransaction.ChannelNo)
  return channelno_;
}
void MDTransaction::set_channelno(::google::protobuf::int32 value) {
  
  channelno_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDTransaction.ChannelNo)
}

// optional int32 ExchangeDate = 17;
void MDTransaction::clear_exchangedate() {
  exchangedate_ = 0;
}
::google::protobuf::int32 MDTransaction::exchangedate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDTransaction.ExchangeDate)
  return exchangedate_;
}
void MDTransaction::set_exchangedate(::google::protobuf::int32 value) {
  
  exchangedate_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDTransaction.ExchangeDate)
}

// optional int32 ExchangeTime = 18;
void MDTransaction::clear_exchangetime() {
  exchangetime_ = 0;
}
::google::protobuf::int32 MDTransaction::exchangetime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDTransaction.ExchangeTime)
  return exchangetime_;
}
void MDTransaction::set_exchangetime(::google::protobuf::int32 value) {
  
  exchangetime_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDTransaction.ExchangeTime)
}

// optional int64 TradeCleanPrice = 19;
void MDTransaction::clear_tradecleanprice() {
  tradecleanprice_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 MDTransaction::tradecleanprice() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDTransaction.TradeCleanPrice)
  return tradecleanprice_;
}
void MDTransaction::set_tradecleanprice(::google::protobuf::int64 value) {
  
  tradecleanprice_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDTransaction.TradeCleanPrice)
}

// optional int64 AccruedInterestAmt = 20;
void MDTransaction::clear_accruedinterestamt() {
  accruedinterestamt_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 MDTransaction::accruedinterestamt() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDTransaction.AccruedInterestAmt)
  return accruedinterestamt_;
}
void MDTransaction::set_accruedinterestamt(::google::protobuf::int64 value) {
  
  accruedinterestamt_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDTransaction.AccruedInterestAmt)
}

// optional int64 TradeDirtyPrice = 21;
void MDTransaction::clear_tradedirtyprice() {
  tradedirtyprice_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 MDTransaction::tradedirtyprice() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDTransaction.TradeDirtyPrice)
  return tradedirtyprice_;
}
void MDTransaction::set_tradedirtyprice(::google::protobuf::int64 value) {
  
  tradedirtyprice_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDTransaction.TradeDirtyPrice)
}

// optional int64 MaturityYield = 22;
void MDTransaction::clear_maturityyield() {
  maturityyield_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 MDTransaction::maturityyield() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDTransaction.MaturityYield)
  return maturityyield_;
}
void MDTransaction::set_maturityyield(::google::protobuf::int64 value) {
  
  maturityyield_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDTransaction.MaturityYield)
}

// optional string FITradingMethod = 23;
void MDTransaction::clear_fitradingmethod() {
  fitradingmethod_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MDTransaction::fitradingmethod() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDTransaction.FITradingMethod)
  return fitradingmethod_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MDTransaction::set_fitradingmethod(const ::std::string& value) {
  
  fitradingmethod_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDTransaction.FITradingMethod)
}
void MDTransaction::set_fitradingmethod(const char* value) {
  
  fitradingmethod_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDTransaction.FITradingMethod)
}
void MDTransaction::set_fitradingmethod(const char* value, size_t size) {
  
  fitradingmethod_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDTransaction.FITradingMethod)
}
::std::string* MDTransaction::mutable_fitradingmethod() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDTransaction.FITradingMethod)
  return fitradingmethod_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MDTransaction::release_fitradingmethod() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDTransaction.FITradingMethod)
  
  return fitradingmethod_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MDTransaction::set_allocated_fitradingmethod(::std::string* fitradingmethod) {
  if (fitradingmethod != NULL) {
    
  } else {
    
  }
  fitradingmethod_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fitradingmethod);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDTransaction.FITradingMethod)
}

inline const MDTransaction* MDTransaction::internal_default_instance() {
  return &MDTransaction_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com

// @@protoc_insertion_point(global_scope)
